name: BrowserStack - E2E Tests

on:
  workflow_dispatch:
    inputs:
      tags:
        description: "Which test tags to run (e.g. regression, login)"
        required: false
        default: ""
      platform:
        description: "Test platform (android/ios)"
        required: true
        default: "android"
        type: choice
        options:
          - android
          - ios
      environment:
        description: "Test environment (sit/staging/production)"
        required: true
        type: choice
        options:
          - staging
          - sit
          - production
        default: "sit"
  repository_dispatch:
    types: [run-e2e-tests]

permissions:
  id-token: write
  contents: read

env:
  PYTHON_VERSION: "3.9"
  AWS_REGION: ap-northeast-1
  S3_BUCKET: hotcake-devops-site
  S3_REPORT_PATH: e2e-tests-allure-report

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEV_GITHUB_ACTION_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install awscli

      - name: Install Allure CLI
        run: npm install -g allure-commandline --save-dev

      - name: Create Test Directories
        run: |
          mkdir -p allure-results
          mkdir -p allure-report


      - name: Set Taipei Timestamp
        run: |
          echo "TAIPEI_DATE=$(TZ='Asia/Taipei' date +'%Y%m%d')" >> $GITHUB_ENV
          echo "TAIPEI_TIME=$(TZ='Asia/Taipei' date +'%H%M')" >> $GITHUB_ENV

      - name: Run tests
        env:
          # GitHub Actions environment identifier
          TEST_ENV: github_actions
          
          # Test runner settings
          TEST_RUNNER: browserstack
          
          # Application environment settings
          APPIUM_OS: ${{ github.event.inputs.platform || 'android' }}
          APPIUM_ENV: ${{ github.event.inputs.environment || 'sit' }}
          API_ENVIRONMENT: ${{ github.event.inputs.environment == 'sit' && 'sit' || github.event.inputs.environment || 'sit' }}
          
          # Basic test configuration
          IMPLICIT_WAIT: 25
          NO_RESET: False
          AUTO_ACCEPT_ALERTS: True
          DEVICE_COUNT: 1
          
          # BrowserStack credentials
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          BROWSERSTACK_HUB_URL: https://hub-cloud.browserstack.com/wd/hub
          
          # BrowserStack project settings
          BROWSERSTACK_PROJECT_NAME: "Hotcake App - E2E Tests"
          BROWSERSTACK_BUILD_NAME: "${{ env.TAIPEI_DATE }}-GA-${{ github.event.inputs.platform || 'android' }}-${{ github.event.inputs.environment || 'sit' }}"
          BROWSERSTACK_SESSION_NAME: "Manual-${{ env.TAIPEI_TIME }}-${{ github.event.inputs.test_file != '' && github.event.inputs.test_file || github.event.inputs.tags != '' && github.event.inputs.tags || 'All-Tests' }}"
          
          # BrowserStack device settings
          BROWSERSTACK_DEVICE_NAME: ${{ (github.event.inputs.platform || 'android') == 'android' && 'Google Pixel 8' || (github.event.inputs.platform || 'android') == 'pados' && 'iPad Pro 11 2024' || 'iPhone 15 Pro' }}
          BROWSERSTACK_OS_VERSION: ${{ (github.event.inputs.platform || 'android') == 'android' && '14.0' || (github.event.inputs.platform || 'android') == 'pados' && '17.0' || '17.0' }}
          
          # BrowserStack application ID (dynamic based on environment and platform)
          BROWSERSTACK_ANDROID_APP_ID_STAGING: ${{ secrets.BROWSERSTACK_ANDROID_APP_ID_STAGING }}
          BROWSERSTACK_ANDROID_APP_ID_SIT: ${{ secrets.BROWSERSTACK_ANDROID_APP_ID_SIT }}
          BROWSERSTACK_ANDROID_APP_ID_PRODUCTION: ${{ secrets.BROWSERSTACK_ANDROID_APP_ID_PRODUCTION }}
          BROWSERSTACK_IOS_APP_ID_STAGING: ${{ secrets.BROWSERSTACK_IOS_APP_ID_STAGING }}
          BROWSERSTACK_IOS_APP_ID_SIT: ${{ secrets.BROWSERSTACK_IOS_APP_ID_SIT }}
          BROWSERSTACK_IOS_APP_ID_PRODUCTION: ${{ secrets.BROWSERSTACK_IOS_APP_ID_PRODUCTION }}
          
          # Application ID settings
          APP_ID_STAGING: "com.hunger.hotcakeapp.staging"
          APP_ID_SIT: "com.hunger.hotcakeapp.sit"
          APP_ID_PRODUCTION: "com.hunger.hotcakeapp"
          
          
        run: |
          echo "Running ${{ github.event.inputs.platform || 'android' }} E2E tests..."

          # Install and start BrowserStack local test tool
          curl -L https://www.browserstack.com/browserstack-local/BrowserStackLocal-linux-x64.zip -o BrowserStackLocal.zip
          unzip BrowserStackLocal.zip
          ./BrowserStackLocal --key ${{ secrets.BROWSERSTACK_ACCESS_KEY }} --daemon start

          # Set test parameters (environment variables are set in .env)
          
          # Run tests
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.tags }}" ]; then
            echo "Running manual trigger with tag: ${{ github.event.inputs.tags }}"
            python -m pytest -v -k "${{ github.event.inputs.tags }}" --platform ${{ github.event.inputs.platform || 'android' }} --runner browserstack --env ${{ github.event.inputs.environment || 'sit' }} --alluredir=allure-results
          else
            echo "Running tests with platform: ${{ github.event.inputs.platform || 'android' }}"
            python -m pytest -v --platform ${{ github.event.inputs.platform || 'android' }} --runner browserstack --env ${{ github.event.inputs.environment || 'sit' }} --alluredir=allure-results
          fi

      - name: Generate Allure Report
        if: always()
        run: allure generate --clean -o allure-report allure-results

      - name: Sync Allure Report to S3 (history)
        if: always()
        run: |
          TIMESTAMP=$(TZ='Asia/Taipei' date +'%Y%m%d-%H%M')
          aws s3 sync allure-report s3://${{ env.S3_BUCKET }}/${{ env.S3_REPORT_PATH }}/$TIMESTAMP --delete
          echo "manual" > build_type.txt
          aws s3 cp build_type.txt s3://${{ env.S3_BUCKET }}/${{ env.S3_REPORT_PATH }}/$TIMESTAMP/build_type.txt
          echo "History report sync completed"

      - name: Sync Allure Report to S3 (latest)
        if: always()
        run: |
          # Upload to temporary directory
          aws s3 sync allure-report s3://${{ env.S3_BUCKET }}/${{ env.S3_REPORT_PATH }}/temp-latest --delete

          # Delete old latest
          aws s3 rm s3://${{ env.S3_BUCKET }}/${{ env.S3_REPORT_PATH }}/latest/ --recursive

          # Rename temporary directory to latest
          aws s3 sync s3://${{ env.S3_BUCKET }}/${{ env.S3_REPORT_PATH }}/temp-latest s3://${{ env.S3_BUCKET }}/${{ env.S3_REPORT_PATH }}/latest

          # Add build_type.txt
          echo "manual" > build_type.txt
          aws s3 cp build_type.txt s3://${{ env.S3_BUCKET }}/${{ env.S3_REPORT_PATH }}/latest/build_type.txt

          # Clean temporary directory
          aws s3 rm s3://${{ env.S3_BUCKET }}/${{ env.S3_REPORT_PATH }}/temp-latest/ --recursive
          
          # Verify sync status
          echo "🔍 驗證 latest 目錄同步狀況..."
          if aws s3 ls s3://${{ env.S3_BUCKET }}/${{ env.S3_REPORT_PATH }}/latest/index.html; then
            echo "✅ Latest report sync completed successfully"
            echo "📋 Latest 目錄內容："
            aws s3 ls s3://${{ env.S3_BUCKET }}/${{ env.S3_REPORT_PATH }}/latest/ --recursive
          else
            echo "❌ Latest report sync failed"
            echo "📋 檢查 temp-latest 是否存在："
            aws s3 ls s3://${{ env.S3_BUCKET }}/${{ env.S3_REPORT_PATH }}/temp-latest/ --recursive || echo "temp-latest 目錄不存在"
            exit 1
          fi

      - name: Generate Allure Index Page
        if: always()
        run: |
          sleep 10  
          # Create index page directory
          mkdir -p allure-index
          INDEX_FILE=allure-index/index.html

          # Get existing report list from S3
          echo "Fetching existing reports from S3..."
          EXISTING_REPORTS=$(aws s3 ls s3://${{ env.S3_BUCKET }}/${{ env.S3_REPORT_PATH }}/ | grep 'PRE' | awk '{print $2}' | sed 's/\///g' | grep -E '^[0-9]{8}-[0-9]{4}$' | sort -r) || true

          # Generate HTML index page
          cat > $INDEX_FILE << 'EOF'
          <!DOCTYPE html>
          <html lang="zh-TW">
          <head>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <title>Allure Reports Index - E2E Test Reports</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 20px;
                      background-color: #f5f5f5;
                  }
                                     .header {
                       background: linear-gradient(135deg, #ff9a9e 0%, #fad0c4 100%);
                       color: white;
                       padding: 30px;
                       border-radius: 10px;
                       margin-bottom: 30px;
                       text-align: center;
                   }
                  .header h1 {
                      margin: 0;
                      font-size: 2.5em;
                  }
                  .header p {
                      margin: 10px 0 0 0;
                      opacity: 0.9;
                  }
                  .reports-container {
                      display: grid;
                      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
                      gap: 20px;
                      margin-bottom: 30px;
                  }
                  .report-card {
                      background: white;
                      border-radius: 10px;
                      padding: 20px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                      transition: transform 0.2s, box-shadow 0.2s;
                  }
                  .report-card:hover {
                      transform: translateY(-2px);
                      box-shadow: 0 4px 20px rgba(0,0,0,0.15);
                  }
                                     .report-card.latest {
                       border: 2px solid #28a745;
                       background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
                       color: white;
                   }
                  .report-card.latest .report-title {
                      color: white;
                  }
                  .report-title {
                      font-size: 1.2em;
                      font-weight: bold;
                      margin-bottom: 10px;
                      color: #333;
                  }
                  .report-date {
                      color: #666;
                      font-size: 0.9em;
                      margin-bottom: 15px;
                  }
                  .report-card.latest .report-date {
                      color: rgba(255,255,255,0.9);
                  }
                                     .report-link {
                       display: inline-block;
                       background: #007bff;
                       color: white;
                       text-decoration: none;
                       padding: 10px 20px;
                       border-radius: 5px;
                       transition: background 0.2s;
                   }
                   .report-link:hover {
                       background: #0056b3;
                       text-decoration: none;
                       color: white;
                   }
                  .report-card.latest .report-link {
                      background: rgba(255,255,255,0.2);
                      color: white;
                  }
                  .report-card.latest .report-link:hover {
                      background: rgba(255,255,255,0.3);
                  }
                  .no-reports {
                      text-align: center;
                      color: #666;
                      font-style: italic;
                      grid-column: 1 / -1;
                  }
                  .report-type {
                      color: #666;
                      font-size: 0.95em;
                      margin-bottom: 15px;
                      font-weight: 500;
                  }
                  .report-card.latest .report-type {
                      color: rgba(255,255,255,0.9);
                  }
              </style>
          </head>
          <body>
                             <div class="header">
                   <h1>🧪 E2E Test Reports</h1>
               </div>
              
              <div class="reports-container">
          EOF

          # Add latest report card - pointing to the latest timestamp report
          if [ -n "$EXISTING_REPORTS" ]; then
            LATEST_REPORT=$(echo "$EXISTING_REPORTS" | head -1)
            cat >> $INDEX_FILE << EOF
                  <div class="report-card latest">
                      <div class="report-title">🚀 Latest Report ($LATEST_REPORT)</div>
                      <div class="report-type">Most recent test execution</div>
                      <a href="./$LATEST_REPORT/index.html" class="report-link">View Latest Report</a>
                  </div>
          EOF
          else
            cat >> $INDEX_FILE << 'EOF'
                  <div class="report-card latest">
                      <div class="report-title">🚀 Latest Report</div>
                      <div class="report-type">No recent test execution</div>
                      <span class="report-link" style="background: #ccc; cursor: not-allowed;">No Reports Available</span>
                  </div>
          EOF
          fi

          # Add historical reports
          if [ -n "$EXISTING_REPORTS" ]; then
            echo "$EXISTING_REPORTS" | while read -r report_dir; do
              if [ -n "$report_dir" ] && [ "$report_dir" != "latest" ]; then
                # Read build type
                BUILD_TYPE=$(aws s3 cp s3://${{ env.S3_BUCKET }}/${{ env.S3_REPORT_PATH }}/$report_dir/build_type.txt - 2>/dev/null || echo "unknown")
                echo "Report $report_dir build type: $BUILD_TYPE"

                case $BUILD_TYPE in
                  "scheduled") ICON="🤖"; TYPE_NAME="Scheduled Run" ;;
                  "manual") ICON="👤"; TYPE_NAME="Manual Run" ;;
                  "trigger") ICON="🔄"; TYPE_NAME="Trigger Run" ;;
                  *) ICON="❓"; TYPE_NAME="Unknown Run ($BUILD_TYPE)" ;;
                esac
                
                if [ "$BUILD_TYPE" = "unknown" ]; then
                  hour=${report_dir:9:2}
                  if [ "$hour" = "18" ] || [ "$hour" = "02" ]; then
                    BUILD_TYPE="scheduled"
                  else
                    BUILD_TYPE="manual"
                  fi
                fi
                
                cat >> $INDEX_FILE << EOF
                  <div class="report-card">
                      <div class="report-title">📊 Report $report_dir</div>
                      <div class="report-type">$ICON $TYPE_NAME</div>
                      <a href="./$report_dir/index.html" class="report-link">View Report</a>
                  </div>
          EOF
              fi
            done
          else
            cat >> $INDEX_FILE << 'EOF'
                  <div class="no-reports">
                      No historical reports found
                  </div>
          EOF
          fi

          # Close HTML
          cat >> $INDEX_FILE << 'EOF'
              </div>
              
              <div style="text-align: center; margin-top: 30px; color: #666; font-size: 0.9em;">
                  © 2025 Hotcake. All rights reserved.
              </div>
          </body>
          </html>
          EOF

          echo "Generated index page at $INDEX_FILE"

      - name: Upload Index Page to S3
        if: always()
        run: |
          aws s3 cp allure-index/index.html s3://${{ env.S3_BUCKET }}/${{ env.S3_REPORT_PATH }}/index.html
          echo "Index page uploaded to S3"

      - name: Clean old reports (keep 14 days)
        if: always()
        run: |
          CUTOFF_DATE=$(TZ='Asia/Taipei' date -d '14 days ago' +'%Y%m%d')
          echo "Cleaning reports older than $CUTOFF_DATE (keeping 14 days)"

          aws s3 ls s3://${{ env.S3_BUCKET }}/${{ env.S3_REPORT_PATH }}/ | \
          grep 'PRE' | awk '{print $2}' | sed 's/\///g' | \
          grep -E '^[0-9]{8}-[0-9]{4}$' | \
          while read report_dir; do
            report_date=${report_dir:0:8}
            if [ "$report_date" -lt "$CUTOFF_DATE" ]; then
              echo "🗑️ Deleting old report: $report_dir (created: $report_date)"
              aws s3 rm s3://${{ env.S3_BUCKET }}/${{ env.S3_REPORT_PATH }}/$report_dir/ --recursive
            else
              echo "✅ Keeping recent report: $report_dir (created: $report_date)"
            fi
          done

          echo "✨ Cleanup completed - reports older than $CUTOFF_DATE have been removed"

      - name: Check Allure CLI version
        if: always()
        run: allure --version
